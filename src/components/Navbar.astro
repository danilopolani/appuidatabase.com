---
import NavbarDropdown from './NavbarDropdown.astro';
import { ScreenCategory } from 'src/enums';
import { getScreenCategoryName } from 'src/helpers';

interface Props {
	isHome?: boolean;
}

const { isHome } = Astro.props;
---
<nav class="bg-pastel-purple border-pastel-black border-b-2 sticky top-0 z-10" x-data="{ mobileOpen: false }">
  <div class="container flex flex-wrap items-center justify-between mx-auto px-4">
    <a href="/" class="py-4 text-xl md:text-2xl font-semibold text-pastel-black font-heading tracking-[-0.1rem]">
      {isHome && (
        <h1>App UI Database</h1>
      )}

      {!isHome && (
        <span>App UI Database</span>
      )}
    </a>

    <!-- Mobile toggle -->
    <button class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm md:hidden focus:outline-none text-pastel-black" aria-controls="navbar-dropdown" :aria-expanded="mobileOpen" @click="mobileOpen = !mobileOpen">
      <span class="sr-only">Open main menu</span>
      <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
      </svg>
    </button>

    <div class="w-full md:block md:w-auto" :class="!mobileOpen && 'hidden'" id="navbar-dropdown">
      <ul class="flex flex-col font-medium md:flex-row md:space-x-8">
        <!-- Component -->
        <NavbarDropdown label="Component" items={
          Object.values(ScreenCategory).map((category) => ({
            url: '/components/' + category,
            label: getScreenCategoryName(category),
          }))
        } />
      </ul>
    </div>
  </div>
</nav>
